# -*- coding: utf-8 -*-
"""vgg16 classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Unp_LmOAza7Gmj26HRP8orclyUXhZAWr
"""

# GITHUB: https://github.com/its-shreya-s

"""VGG-16 is a convolutional neural network that is 16 layers deep. This code uses VGG16 for binary classification of images."""

import numpy as np
import tensorflow as tf
from tensorflow.keras.applications import VGG16
from tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
import matplotlib.pyplot as plt

# Load pre-trained VGG-16 model without top layer
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze VGG-16 layers
for layer in base_model.layers:
    layer.trainable = False

# Add custom classification layers
x = Flatten()(base_model.output)
x = Dense(256, activation='relu')(x)
output = Dense(1, activation='sigmoid')(x)

# Create model
model = Model(inputs=base_model.input, outputs=output)
# Compile model
model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.01), metrics=['accuracy'])

# Load and preprocess data
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        '<path to train set>',
        target_size=(224, 224),
        batch_size=32,
        class_mode='binary')

test_generator = test_datagen.flow_from_directory(
        '<path to test set>',
        target_size=(224, 224),
        batch_size=32,
        class_mode='binary')

# Train the model
model.fit(train_generator, epochs=5, validation_data=test_generator)

# Evaluate the model
accuracy = model.evaluate(test_generator)[1]
print("Test Accuracy:", accuracy)

class_labels = {0: 'true', 1: 'false'}
#/content/drive/MyDrive/mini project/cashew drive/basedata/testing
def do_test(img_array):
  predictions = model.predict(img_array)
  predicted_class = int(predictions[0][0])
  predicted_label = class_labels[predicted_class]
  plt.imshow(img)
  plt.title('Predicted class: ' + predicted_label)
  plt.axis('off')
  plt.show()

for i in range(1,11):
  img_path = '<path>' + str(i) + '.jpg'
  img = image.load_img(img_path, target_size=(224, 224))
  img_array = image.img_to_array(img)
  img_array = np.expand_dims(img_array, axis=0)
  img_array = preprocess_input(img_array)
  do_test(img_array)

# the path specified here contains 10 images named from 1-10. Each of the images is loaded and used for testing the model.

